/// <reference path="..\jriapp.d.ts"/>

module RIAPP
{
    export module FOLDERBROWSER_SVC {
        'use strict';
        /*
            Generated from: /FolderBrowserService/CodeGen on 2014-01-06 14:31 at 14:31
            Don't make manual changes here, because they will be lost when this db interface will be regenerated!
        */

        export interface ISvcMethods {
        }

        export interface IFileSystemObjectEntity extends RIAPP.MOD.utils.IEditable, RIAPP.MOD.utils.ISubmittable {
            Key: string;
            ParentKey: string;
            Name: string;
            Level: number;
            HasSubDirs: boolean;
            IsFolder: boolean;
            fullPath: string;
            Parent: FileSystemObject;
            Children: FileSystemObject[];

            getDbContext(): DbContext;
            getDbSet(): RIAPP.MOD.db.DbSet<FileSystemObject>;
            _dbSet: RIAPP.MOD.db.DbSet<FileSystemObject>;
            asEntity(): FileSystemObject;
        }

        export class FileSystemObject extends RIAPP.MOD.db.Entity implements IFileSystemObjectEntity {

            constructor(dbSet: FileSystemObjectDb, row: RIAPP.MOD.db.IRowData, names: RIAPP.MOD.db.IFieldName[]) {
                super(dbSet, row, names);

            }
            get Key(): string { return this._getFieldVal('Key'); }
            get ParentKey(): string { return this._getFieldVal('ParentKey'); }
            get Name(): string { return this._getFieldVal('Name'); }
            get Level(): number { return this._getFieldVal('Level'); }
            get HasSubDirs(): boolean { return this._getFieldVal('HasSubDirs'); }
            get IsFolder(): boolean { return this._getFieldVal('IsFolder'); }
            get fullPath(): string { return this._getCalcFieldVal('fullPath'); }
            get Parent(): FileSystemObject { return this._getNavFieldVal('Parent'); }
            set Parent(v: FileSystemObject) { this._setNavFieldVal('Parent', v); }
            get Children(): FileSystemObject[] { return this._getNavFieldVal('Children'); }

            getDbContext() {
                return <DbContext>super.getDbContext();
            }
            getDbSet() {
                return <RIAPP.MOD.db.DbSet<FileSystemObject>>super.getDbSet();
            }
            get _dbSet() { return this.getDbSet(); }
            toString() {
                return 'FileSystemObjectEntity';
            }
            asEntity() { return this; }
            asInterface() { return <IFileSystemObjectEntity>this; }
        }

        export class FileSystemObjectDb extends RIAPP.MOD.db.DbSet<FileSystemObject>
        {
            constructor(dbContext: DbContext) {
                var self = this, opts: RIAPP.MOD.db.IDbSetConstuctorOptions = {
                    dbContext: dbContext,
                    dbSetInfo: { "dbSetName": "FileSystemObject", "enablePaging": false, "pageSize": 25, "fieldInfos": [{ "fieldName": "Key", "dataType": 1, "maxLength": 255, "isNullable": false, "isAutoGenerated": true, "isReadOnly": true, "isPrimaryKey": 1, "fieldType": 0, "nested": null, "dependentOn": "", "regex": "", "isNeedOriginal": true, "range": "", "dateConversion": 0, "allowClientDefault": false }, { "fieldName": "ParentKey", "dataType": 1, "maxLength": 255, "isNullable": true, "isAutoGenerated": false, "isReadOnly": true, "isPrimaryKey": 0, "fieldType": 0, "nested": null, "dependentOn": "", "regex": "", "isNeedOriginal": true, "range": "", "dateConversion": 0, "allowClientDefault": false }, { "fieldName": "Name", "dataType": 1, "maxLength": 255, "isNullable": false, "isAutoGenerated": false, "isReadOnly": true, "isPrimaryKey": 0, "fieldType": 0, "nested": null, "dependentOn": "", "regex": "", "isNeedOriginal": true, "range": "", "dateConversion": 0, "allowClientDefault": false }, { "fieldName": "Level", "dataType": 3, "maxLength": -1, "isNullable": false, "isAutoGenerated": false, "isReadOnly": true, "isPrimaryKey": 0, "fieldType": 0, "nested": null, "dependentOn": "", "regex": "", "isNeedOriginal": true, "range": "", "dateConversion": 0, "allowClientDefault": false }, { "fieldName": "HasSubDirs", "dataType": 2, "maxLength": -1, "isNullable": false, "isAutoGenerated": false, "isReadOnly": true, "isPrimaryKey": 0, "fieldType": 0, "nested": null, "dependentOn": "", "regex": "", "isNeedOriginal": true, "range": "", "dateConversion": 0, "allowClientDefault": false }, { "fieldName": "IsFolder", "dataType": 2, "maxLength": -1, "isNullable": false, "isAutoGenerated": false, "isReadOnly": true, "isPrimaryKey": 0, "fieldType": 0, "nested": null, "dependentOn": "", "regex": "", "isNeedOriginal": true, "range": "", "dateConversion": 0, "allowClientDefault": false }, { "fieldName": "fullPath", "dataType": 1, "maxLength": -1, "isNullable": true, "isAutoGenerated": false, "isReadOnly": false, "isPrimaryKey": 0, "fieldType": 2, "nested": null, "dependentOn": "", "regex": "", "isNeedOriginal": true, "range": "", "dateConversion": 0, "allowClientDefault": false }, { "fieldName": "Parent", "dataType": 0, "maxLength": -1, "isNullable": true, "isAutoGenerated": false, "isReadOnly": false, "isPrimaryKey": 0, "fieldType": 3, "nested": null, "dependentOn": "ParentKey", "regex": "", "isNeedOriginal": true, "range": "", "dateConversion": 0, "allowClientDefault": false }, { "fieldName": "Children", "dataType": 0, "maxLength": -1, "isNullable": true, "isAutoGenerated": false, "isReadOnly": false, "isPrimaryKey": 0, "fieldType": 3, "nested": null, "dependentOn": "", "regex": "", "isNeedOriginal": true, "range": "", "dateConversion": 0, "allowClientDefault": false }] },
                    childAssoc: [{ "name": "ChildToParent", "parentDbSetName": "FileSystemObject", "childDbSetName": "FileSystemObject", "childToParentName": "Parent", "parentToChildrenName": "Children", "fieldRels": [{ "parentField": "Key", "childField": "ParentKey" }], "onDeleteAction": 1 }],
                    parentAssoc: [{ "name": "ChildToParent", "parentDbSetName": "FileSystemObject", "childDbSetName": "FileSystemObject", "childToParentName": "Parent", "parentToChildrenName": "Children", "fieldRels": [{ "parentField": "Key", "childField": "ParentKey" }], "onDeleteAction": 1 }]
                }, utils = RIAPP.global.utils;
                super(opts, FileSystemObject);
            }
            findEntity(key: string): FileSystemObject {
                return this.findByPK(RIAPP.ArrayHelper.fromList(arguments));
            }
            createReadRootQuery(args?: {
                includeFiles: boolean;
            }) {
                var query = this.createQuery('ReadRoot');
                query.params = args;
                return query;
            }
            createReadChildrenQuery(args?: {
                parentKey: string;
                level: number;
                path: string;
                includeFiles: boolean;
            }) {
                var query = this.createQuery('ReadChildren');
                query.params = args;
                return query;
            }

            definefullPathField(getFunc: () => string) { this._defineCalculatedField('fullPath', getFunc); }

            get items2() { return <IFileSystemObjectEntity[]>this.items; }
        }

        export interface IAssocs {
            getChildToParent: () => MOD.db.Association;
        }


        export class DbSets extends RIAPP.MOD.db.DbSets {
            constructor(dbContext: DbContext) {
                super(dbContext);
                this._dbSetNames = ["FileSystemObject"];
                this._createDbSet("FileSystemObject", FileSystemObjectDb);

            }
            get FileSystemObject() { return <FileSystemObjectDb>this.getDbSet("FileSystemObject"); }

        }

        export class DbContext extends RIAPP.MOD.db.DbContext {
            _initDbSets() {
                super._initDbSets();
                this._dbSets = new DbSets(this);
                var associations = [{ "name": "ChildToParent", "parentDbSetName": "FileSystemObject", "childDbSetName": "FileSystemObject", "childToParentName": "Parent", "parentToChildrenName": "Children", "fieldRels": [{ "parentField": "Key", "childField": "ParentKey" }], "onDeleteAction": 1 }];
                this._initAssociations(associations);
                var methods = [{ "methodName": "ReadRoot", "parameters": [{ "name": "includeFiles", "dataType": 2, "isArray": false, "isNullable": false, "dateConversion": 0, "ordinal": 0 }], "methodResult": true, "isQuery": true }, { "methodName": "ReadChildren", "parameters": [{ "name": "parentKey", "dataType": 1, "isArray": false, "isNullable": false, "dateConversion": 0, "ordinal": 0 }, { "name": "level", "dataType": 3, "isArray": false, "isNullable": false, "dateConversion": 0, "ordinal": 1 }, { "name": "path", "dataType": 1, "isArray": false, "isNullable": false, "dateConversion": 0, "ordinal": 2 }, { "name": "includeFiles", "dataType": 2, "isArray": false, "isNullable": false, "dateConversion": 0, "ordinal": 3 }], "methodResult": true, "isQuery": true }];
                this._initMethods(methods);
            }
            get associations() { return <IAssocs>this._assoc; }
            get dbSets() { return <DbSets>this._dbSets; }
            get serviceMethods() { return <ISvcMethods>this._svcMethods; }
        }
    }
}
